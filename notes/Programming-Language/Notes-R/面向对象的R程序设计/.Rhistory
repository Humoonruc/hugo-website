rvest, httr, xml2, # 爬虫
sqldf, DT, # I/O，其中sqldf包含了RSQLite包
jiebaR # 中文分词工具
)
options(sqldf.driver = "SQLite")
## pdf中图形内部的中文字体设置
pdf.options(family = "GB1")
# 安装字体文件
# font_add('YaHei','MS YaHei.ttf')
windowsFonts(YaHei = windowsFont("Microsoft YaHei"))
showtext_auto(enable = TRUE)
# 包含图的代码块需要fig.showtext = TRUE选项
# ggplot2图形需要在主题中显式指定中文字体才能正常显示图中的中文
## 自定义一般图形主题
mytheme <- theme_economist_white()
theme(text = element_text(family = 'YaHei'),
plot.title = element_text(face = 'bold', size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(hjust = 0, size = 10, margin = margin(2,0,0,0,'pt')),
plot.margin = margin(12,10,12,0,'pt'),
legend.position = 'top',
legend.justification = 'left',
legend.margin = margin(4,0,0,0,'pt'),
legend.key.size = unit(1,'lines'),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10, margin = margin(0,0,0,0,'pt')),
axis.text = element_text(size = 10, margin = margin(2,0,2,0,'pt')),
axis.ticks.length = unit(-4,'pt')
)
# 自定义柱状图主题
theme_bar <- theme_economist_white()
theme(text = element_text(family = 'YaHei'), # 所有的文本字体
plot.title = element_text(face = 'bold', size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(hjust = 0, size = 10,
margin = margin(0,0,0,0,'pt')),
plot.margin = margin(12,0,12,10,'pt'),
legend.position = 'top',
legend.justification = 'left',
legend.margin = margin(4,0,0,0,'pt'),
legend.key.size = unit(0.7,'lines'),
legend.title = element_blank(),
legend.text = element_text(size = 10, margin = margin(0,8,0,4,'pt')),
axis.text = element_text(size = 10),
axis.ticks.length = unit(0,'pt') # 不要坐标轴须
)
# 再次重新定义Person类，覆盖旧的定义
Person3 <- R6Class("Person3",
# 公有成员
public = list(
name = NA,
initialize = function(str_name, str_gender){
self$name <- str_name
private$gender <- str_gender # 初始化函数给私有属性赋值
},
hello = function(){
print(paste("Hello,", self$name))
private$myGender()
}
# 调用私有属性和私有方法，都需要借助private对象
),
# 私有成员
private = list(
gender = NA,
myGender = function(){
print(paste(self$name,"is",private$gender))
}
)
)
conan <- Person3$new('Conan', 'Male')
conan$hello()
u3 <- Person3$new('Conan', 'Male')
u3$hello()
u3$name
u3$gender          # 私有属性
u3$myGender()      # 私有方法
?missing()
Calculate <- R6Class("Calculate",
public = list(
num = 100
),
active = list(
# 主动绑定的第一个函数，有参数
alter = function(value) {
# 若参数缺失
if (missing(value)) return(self$num + 10)
# 若参数得到了定义
else self$num <- value/2
},
# 主动绑定的第二个函数，无参数
rand = function() rnorm(1)
)
)
exam <- Calculate$new()
exam$num
# 调用主动绑定的active()函数
# 由于没有参数，结果为 num + 10= 100 + 10 = 100
exam$active
# 调用主动绑定的active()函数
# 由于没有参数，结果为 num + 10= 100 + 10 = 100
exam$active
exam$num
# 调用主动绑定的active()函数
# 由于没有参数，结果为 num + 10= 100 + 10 = 100
exam$active()
# 调用主动绑定的active()函数
# 由于没有参数，结果为 num + 10= 100 + 10 = 100
exam$alter
# 调用主动绑定的active()函数
# 由于没有参数，结果为 num + 10= 100 + 10 = 100
exam$alter
exam$alter <- 100 # 传参数，而非exam$alter()，又是被当做了元素
exam$alter # 查看公有属性num
Calculate <- R6Class("Calculate",
public = list(
num = 100
),
active = list(
# 主动绑定的第一个函数，有参数
alter = function(value) {
# 若参数缺失
if (missing(value)) return(self$num + 10)
# 若参数得到了定义
else self$num <- value/2
},
# 主动绑定的第二个函数，无参数
rand = function() rnorm(1)
)
)
exam <- Calculate$new()
exam$num
# 调用主动绑定的active()函数
# 由于没有参数，结果为 num + 10 = 100 + 10 = 110
exam$alter
exam$alter <- 100
exam$num
exam <- Calculate$new()
exam$num
# 调用主动绑定的active()函数
# 由于没有参数，结果为 num + 10 = 100 + 10 = 110
exam$alter
exam$alter <- 100
exam$num
exam$alter # 查看公有属性num
exam$alter(100)    # 如果进行方法调用，其实会提示没有这个函数的
Worker <- R6Class(
"Worker",
inherit = Person, # 继承，指向父类
public = list(
bye = function(){
print(paste("bye",self$name))
}
)
)
p1 <- Person$new("Conan","Male") # 实例化父类
Person <- R6Class("Person",
# 公有成员
public = list(
# 公有属性name
name = NA,
# 公有方法 1：实例化对象的赋值函数
# initialize()是一个初始化函数
# 实例化对象时 类名$new() 的参数，就传递给了这个initialize()
initialize = function(str_name, str_gender){
# 在类的内部访问公有成员，需要借助self对象来调用
self$name <- str_name
# 调用私有属性和私有方法，都需要借助private对象来调用
private$gender <- str_gender
},
# 公有方法 2：hello函数打印name
hello = function(){
print(paste("Hello,", self$name))
private$myGender()
},
# 公有方法 3：测试self和private对象到底是什么
member = function(){
print(self)
print(private)
print(ls(envir = private))
}
),
# 私有成员
private = list(
gender = NA,
myGender = function(){
print(paste(self$name,"is",private$gender))
}
)
)
# 实例化对象
p1 <- Person$new('Conan', "Male")
p1 <- Person$new("Conan","Male") # 实例化父类
p1$hello()
p2 <- Worker$new("Conan","Male") # 实例化子类
p2$hello()
p2$bye()
p1$hello()
p2$hello()
p2$bye()
p2$hello()
Worker <- R6Class(
"Worker",
inherit = Person, # 继承，指向父类
public = list(
bye = function(){
print(paste("Bye bye",self$name))
}
)
)
p1 <- Person$new("Conan","Male") # 实例化父类
p1$hello()
p2 <- Worker$new("Conan","Male") # 实例化子类
p2$hello()
p2$bye()
Worker <- R6Class(
"Worker",
inherit = Person, # 继承，指向父类
public = list(
# 子类中的新函数
bye = function(){
print(paste("Bye bye",self$name))
}
),
private = list(
gender = NA,
# 子类中重写、覆盖旧函数
myGender = function(){
print(paste("Worker",self$name,"is",private$gender))
}
)
)
p1 <- Person$new("Conan","Male") # 实例化父类
p1$hello()
p2 <- Worker$new("Conan","Male") # 实例化子类
p2$hello()
p1$hello()
p2$hello()
p2$bye()
Worker <- R6Class(
"Worker",
inherit = Person, # 继承，指向父类
public = list(
# 子类中的新函数
bye = function(){
print(paste("Bye bye",self$name))
}
),
private = list(
gender = NA,
# 子类中重写、覆盖旧函数
myGender = function(){
super$myGender() # 子类中调用父类的方法，通过super对象
print(paste("Worker",self$name,"is",private$gender))
}
)
)
p1 <- Person$new("Conan","Male") # 实例化父类
p1$hello()
p2 <- Worker$new("Conan","Male") # 实例化子类
p2$hello()
C <- R6Class("C",
public = list(
a = NULL,
initialize = function() {
a <<- A$new()
}
)
)
cc1 <- C$new()
# A类
A <- R6Class("A",
public = list(
x = NULL
)
)
# B类，其属性是一个A类对象
B <- R6Class("B",
public = list(
a = A$new()
)
)
b1 <- B$new() # 实例化B对象
b1$a$x <- 1 # 给x变量赋值
b1$a$x # 查看x变量的值
b2 <- B$new() # 实例化b2对象
b2$a$x <- 2 # 给x变量赋值
b2$a$x # 查看x变量的值
b1$a$x # b1实例的a对象的x值也发生改变
b1$a$x # b1实例的a对象的x值也发生改变
从输出结果可以看到，a对象实现了在多个b实例的共享。即**不同的B类对象，其属性是同一个A类对象**。
需要注意的是，不能这样写：
```{r}
C <- R6Class("C",
public = list(
a = NULL,
initialize = function() {
a <<- A$new()
}
)
)
cc1 <- C$new()
cc1$a$x <- 1
cc1$a$x
cc2 <- C$new()
cc2$a$x <- 2
cc2$a$x
cc1$a$x # x值未发生改变
A <- R6Class(
"A",
public = list(
x = 1,
getx = function() x
)
)
A$set("public", "getx2", function() self$x*2) # 动态增加getx2()方法
s <- A$new()
s
s$getx2()
A$set("public", "getx2", function() self$x*20) # 动态增加getx2()方法
A <- R6Class(
"A",
public = list(
x = 1,
getx = function() x
)
)
A$set("public", "getx2", function() self$x*20) # 动态增加getx2()方法
s <- A$new()
s
s$getx2()
A <- R6Class(
"A",
public = list(
x = 1,
getx = function() x
)
)
# 动态修改
A$set("public", "x", 10, overwrite = TRUE)
A$set("public", "getx2", function() self$x*10, overwrite = T)
s <- A$new()
s
s$getx2()
A <- R6Class(
"A",
public = list(
x = 1,
getx = function() x
)
)
s <- A$new()
s
s$x
s$getx()
A <- R6Class(
"A",
public = list(
x = 1,
getx = function() self$x
)
)
s <- A$new()
s
s$x
s$getx()
s$getx2()
A <- R6Class(
"A",
public = list(
x = 1,
getx = function() self$x
)
)
# 动态修改
A$set("public", "x", 10, overwrite = T)
A$set("public", "getx2", function() self$x*10, overwrite = T)
s <- A$new()
s
s$x
s$getx()
s$getx2()
A <- R6Class(
"A",
public = list(
x = 1,
getx = function() self$x,
print = function(...) {
cat("Class <A> of public ", ls(self), " :", sep="")
cat(ls(self), sep=",")
invisible(self)
}
)
)
a <- A$new()
print(a)
a$print()
print(a)
A <- R6Class(
"A",
public = list(
x = 1,
getx = function() self$x,
printA = function(...) {
cat("Class <A> of public ", ls(self), " :", sep="")
cat(ls(self), sep=", ")
invisible(self)
}
)
)
a <- A$new()
a$printA()
print(a)
rm(list = ls())
# 父类
Book <- R6Class("Book",
private = list(
title = NA,
price = NA,
category = NA
),
public = list(
initialize = function(title, price, category){
private$title <- title
private$price <- price
private$category <- category
},
getPrice = function(){
private$price
}
)
)
# 子类R图书
R <- R6Class("R",
inherit = Book
)
# 子类JAVA图书
Java <- R6Class("JAVA",
inherit = Book
)
# 子类PHP图书
Php <- R6Class("PHP",
inherit = Book
)
# 创建3个实例
r1 <- R$new("R的极客理想-工具篇", 59, "R")
r1$getPrice()
j1 <- Java$new("Java编程思想", 108, "JAVA")
j1$getPrice()
p1 <- Java$new("Head First PHP & MySQL", 98, "PHP")
p1$getPrice()
View(r1)
Book$set("public", "discount", function 0.9, overwrite = T)
Book$set("public", "discount", function {0.9}, overwrite = T)
Book$set("public", "discount", function {return 0.9}, overwrite = T)
Book$set("public", "discount", function() {0.9}, overwrite = T)
Book$set(
"public",
"getPrice",
function() {
p <- private$price*self$discount()
print(paste("Price:", private$price, ", Sell out:", p, sep = ""))
},
overwrite = T
)
Book$set("public", "discount", function() 0.9, overwrite = T)
Book$set(
"public",
"getPrice",
function() {
p <- private$price*self$discount()
print(paste("Price:", private$price, ", Sell out:", p, sep = ""))
},
overwrite = T
)
## 为父类添加属性和方法
Book$set("public", "discount", function() 0.9, overwrite = T)
Book$set(
"public",
"getPrice",
function() {
p <- private$price*self$discount()
print(paste("Price:", private$price, ", Sell out:", p, sep = ""))
},
overwrite = T
)
# Java类覆盖父类的discount()
Java <- R6Class("JAVA",
inherit = Book,
public = list(
discount=function() 0.7
)
)
# R类通过super$调用父类的discount()
R <- R6Class("R",
inherit = Book,
public = list(
discount=function(){
super$discount() * 0.7
}
)
)
# PHP类直接继承父类
Php <- R6Class("PHP",
inherit = Book
)
# 查看打折结果
r1<-R$new("R的极客理想-工具篇", 59, "R")
r1$getPrice()
j1<-Java$new("Java编程思想", 108, "JAVA")
j1$getPrice()
p1<-Php$new("Head First PHP & MySQL", 98, "PHP")
p1$getPrice()
