# 不担心出错的删除方法：
if (dbExistsTable(con,'t_demo')) {
dbRemoveTable(con, "t_demo")
}
# 列出数据库中现有的表
dbListTables(con)
# 关闭连接
dbDisconnect(con)
con <- dbConnect(MySQL(), username = 'root', password = '1234',
dbname = "yiibaidb", host = 'localhost')
dbListTables(con)
dbReadTable(con, "employees")
unlink('RMySQL_cache', recursive = TRUE)
library(sqldf)
## global options
knitr::opts_chunk$set(
fig.width = 6, fig.asp = 0.618,
out.width = "80%", fig.align = "center",
fig.path = 'Figures/', fig.show = "hold",
warn = 1, warning = F, message = F, echo = T,
comment = '', collapse = F,
cache = T, cache.comments = F, autodep = T
)
## use necessary packages
library('pacman')
p_load(tidyverse, lubridate, # 数据整理，最新版tidyverse已包含管道操作符
ggthemes, showtext, gridExtra, # 可视化
lmtest, plm, orcutt, stats, forecast, zoo, # 统计分析
rvest, httr, xml2, # 爬虫
RMySQL, sqldf, DT, # I/O，其中sqldf包含了RSQLite包
jiebaR, wordcloud2, webshot, htmlwidgets # 文本分析
)
options(sqldf.driver = "SQLite")
## 准备工作
library(sqldf)
options(sqldf.driver = "SQLite")
rm(list = ls())
## 准备工作
library(sqldf)
options(sqldf.driver = "SQLite")
## 从文件读入数据, write.csv.sql()
write.csv(iris, "iris.csv", quote = FALSE, row.names = FALSE)
write.csv(iris, "iris.csv", quote = FALSE, row.names = FALSE)
iris2 <- read.csv.sql(
"iris.csv",
sql = "SELECT * FROM file WHERE Species = 'setosa';")
iris2
## LIMIT子句类似head()
a1r <- head(warpbreaks)
a1s <- sqldf("SELECT * FROM warpbreaks LIMIT 6")
identical(a1r, a1s)  #结果为TRUE，则结果一致
## 筛选观测
a2s <- sqldf("SELECT * FROM CO2 WHERE Plant like 'Qn%'")
View(a2s)
sqldf("SELECT * FROM CO2 WHERE Plant LIKE 'Qn%'")
data(farms, package = "MASS")
force(farms)
sqldf("SELECT * FROM farms where Manag in ('BF', 'HF')")
## 分组汇总
a8s <- sqldf(
'SELECT Species,
AVG("Sepal.Length") AS `Sepal.Length`,
AVG("Sepal.Width") AS `Sepal.Width`
FROM iris
GROUP BY Species')
## 分组汇总
sqldf(
'SELECT Species,
AVG("Sepal.Length") AS `Sepal.Length`,
AVG("Sepal.Width") AS `Sepal.Width`
FROM iris
GROUP BY Species')
sqldf(
'SELECT Species,
AVG("Sepal.Length") AS `mean.Sepal.Length`,
AVG("Sepal.Width") AS `mean.Sepal.Width`,
AVG("Sepal.Length"/"Sepal.Width") AS `mean.Sepal.ratio`
FROM iris
GROUP BY Species')
## ave - rows for which v exceeds its group average where g is group
DF <- data.frame(g = rep(1:2, each = 5), t = rep(1:5, 2), v = 1:10)
View(DF)
Gavg <- sqldf("SELECT g, AVG(v) AS avg_v FROM DF GROUP BY g")
View(Gavg)
## ave - rows for which v exceeds its group average where g is group
df <- data.frame(g = rep(1:2, each = 5), t = rep(1:5, 2), v = 1:10)
sqldf("SELECT g, AVG(v) AS avg_v FROM df GROUP BY g")
## ave - rows for which v exceeds its group average where g is group
df <- data.frame(g = rep(1:2, each = 5), t = rep(1:5, 2), v = 1:10)
Gavg <- sqldf("SELECT g, AVG(v) AS avg_v FROM df GROUP BY g")
Gavg
## ave - rows for which v exceeds its group average where g is group
df <- data.frame(g = rep(1:2, each = 5), t = rep(1:5, 2), v = 1:10)
Gavg <- sqldf("SELECT g, AVG(v) AS avg_v FROM df GROUP BY g")
Gavg
sqldf(
"SELECT df.g, t, v
FROM df, Gavg
WHERE df.g = Gavg.g and v > avg_v")
## same but reduce the two SELECT statements to one using a subquery
sqldf(
"SELECT g, t, v
FROM df AS d1,
(SELECT g as g2, avg(v) as avg_v FROM DF GROUP BY g)
WHERE d1.g = g2 and v > avg_v")
## same but reduce the two SELECT statements to one using a subquery
sqldf(
"SELECT g, t, v
FROM df AS d1,
(SELECT g as g2, avg(v) as avg_v FROM df GROUP BY g)
WHERE d1.g = g2 and v > avg_v")
sqldf(
"SELECT df.g, t, v
FROM df, Gavg
WHERE df.g = Gavg.g and v > avg_v")
## same but reduce the two SELECT statements to one using a subquery
sqldf(
"SELECT g, t, v
FROM df AS d1, (SELECT g AS g2, avg(v) AS avg_v FROM df GROUP BY g)
WHERE d1.g = g2 and v > avg_v")
## table
a15s <- sqldf(
"SELECT SUM(wool = 'A'), SUM(wool = 'B')
FROM warpbreaks
GROUP BY tension")
View(a15s)
## table
a15s <- sqldf(
"SELECT * FROM warpbreaks ")
a15s
sqldf(
"SELECT SUM(wool = 'A'), SUM(wool = 'B')
FROM warpbreaks
GROUP BY tension")
Gavg <- sqldf("SELECT g, AVG(v) AS avg_v FROM df GROUP BY g")
Gavg
sqldf(
"SELECT SUM(wool = 'A'), SUM(wool = 'B')
FROM warpbreaks
GROUP BY tension")
a15s <- sqldf("select sum(wool = 'A'), sum(wool = 'B')
from warpbreaks group by tension")
a15s
## reshape
sqldf(
"SELECT g,
sum((t == 1) * v) t_1,
sum((t == 2) * v) t_2,
sum((t == 3) * v) t_3,
sum((t == 4) * v) t_4,
sum((t == 5) * v) t_5
FROM df
GROUP BY g")
df <- data.frame(g = rep(1:2, each = 5), t = rep(1:5, 2), v = 1:10)
View(df)
## reshape
sqldf(
"SELECT g,
SUM((t == 1) * v) AS t_1,
SUM((t == 2) * v) AS t_2,
SUM((t == 3) * v) AS t_3,
SUM((t == 4) * v) AS t_4,
SUM((t == 5) * v) AS t_5
FROM df
GROUP BY g")
a15s <- sqldf("select sum(wool = 'A'), sum(wool = 'B')
from warpbreaks group by tension")
a15s
warpbreaks
a15s <- sqldf("select sum(wool = 'A'), sum(wool = 'B')
from warpbreaks group by tension")
a15s
warpbreaks
sqldf( # 注意(t==1)是一个逻辑表达式，返回1或0
"SELECT g,
SUM((t == 1) * v) AS t_1,
SUM((t == 2) * v) AS t_2,
SUM((t == 3) * v) AS t_3,
SUM((t == 4) * v) AS t_4,
SUM((t == 5) * v) AS t_5
FROM df
GROUP BY g")
## order
a17s <- sqldf("SELECT * FROM Formaldehyde order by optden desc")
a17s
## centered moving average of length 7
set.seed(1)
df <- data.frame(x = rnorm(15, 1:15))
View(df)
s18 <- sqldf(
"SELECT a.x x, avg(b.x) movavgx
FROM df AS a, df AS b
WHERE a.row_names - b.row_names BETWEEN -3 AND 3
GROUP BY a.row_names
HAVING count(*) = 7
ORDER BY a.row_names+0",
row.names = TRUE)
s18
?sqldf()
s18 <- sqldf(
"SELECT a.x AS x, AVG(b.x) AS movavgx
FROM df AS a, df AS b
WHERE a.row_names - b.row_names BETWEEN -3 AND 3
GROUP BY a.row_names
HAVING count(*) = 7
ORDER BY a.row_names+0",
row.names = TRUE)
s18
View(s18)
s18 <- sqldf(
"SELECT a.x AS x, AVG(b.x) AS movavgx
FROM df AS a, df AS b
WHERE a.row_names - b.row_names BETWEEN -3 AND 3
GROUP BY a.row_names
HAVING count(*) = 7
ORDER BY a.row_names+0",
row.names = F)
## merge
A <- data.frame(a1 = c(1, 2, 1), a2 = c(2, 3, 3), a3 = c(3, 1, 2))
B <- data.frame(b1 = 1:2, b2 = 2:1)
A
B
a19s <- sqldf("SELECT * FROM A, B")
a19s
## 分组汇总
sqldf(
'SELECT Species,
AVG("Sepal.Length") AS `mean.Sepal.Length`,
AVG("Sepal.Width") AS `mean.Sepal.Width`,
AVG("Sepal.Length"/"Sepal.Width") AS `mean.Sepal.ratio`
FROM iris
GROUP BY Species')
df <- data.frame(g = rep(1:2, each = 5), t = rep(1:5, 2), v = 1:10)
Gavg <- sqldf("SELECT g, AVG(v) AS avg_v FROM df GROUP BY g")
Gavg
sqldf( # v exceeds its group average where g is group
"SELECT df.g, t, v
FROM df, Gavg
WHERE df.g = Gavg.g and v > avg_v")
sqldf( # 注意(t==1)是一个逻辑表达式，返回1或0
"SELECT g,
SUM((t == 1) * v) AS t_1,
SUM((t == 2) * v) AS t_2,
SUM((t == 3) * v) AS t_3,
SUM((t == 4) * v) AS t_4,
SUM((t == 5) * v) AS t_5
FROM df
GROUP BY g")
## 由单月值求累计值
df1 <- tibble(year = 2017, month = 1:12, export = 100)
View(df1)
df2 <- tibble(year = 2018, month = 1:12, export = 110)
df <- rbind(df1, df2)
View(df)
sqldf(
"SELECT *,
SUM(export) OVER (PARTITION BY year ORDER BY month) AS acc_export
FROM total")
sqldf(
"SELECT *,
SUM(export) OVER (PARTITION BY year ORDER BY month) AS acc_export
FROM df")
unlink('SQL_Language_cache', recursive = TRUE)
rm(list = ls())
con <- dbConnect(MySQL(), username = "root",
password = "1234", dbname = "tysql")
dbSendQuery(con,'SET NAMES gbk')
con_sqlite <- dbConnect(
SQLite(),
dbname = 'C:/Users/humoo/OneDrive/ICT/DataBase/tysql.sqlite')
dbListTables(con)
# 不必担心出错的删除表方法：
if (dbExistsTable(con,'t_demo')) {
dbRemoveTable(con, "t_demo")
}
dbGetQuery(con,
"SELECT prod_id, prod_name, prod_price FROM Products")
dbGetQuery(con,
"SELECT * FROM Products")
dbGetQuery(con,
"SELECT vend_id, prod_price
FROM Products")
dbGetQuery(con,
"SELECT DISTINCT vend_id, prod_price
FROM Products")
# 前5行
dbGetQuery(con,
"SELECT prod_name
FROM Products
LIMIT 5")
# 从第3行开始，往后数5行（即第4-8行）
dbGetQuery(con,
"SELECT prod_name
FROM Products
LIMIT 5 OFFSET 3")
# 上式的等价简化写法
dbGetQuery(con,
"SELECT prod_name
FROM Products
LIMIT 3,5")
dbGetQuery(con,
"SELECT prod_name
FROM Products
ORDER BY prod_name")
dbGetQuery(con,
"SELECT prod_name
FROM Products
ORDER BY prod_price")
dbGetQuery(con,
"SELECT prod_id, prod_price, prod_name
FROM Products
ORDER BY prod_price, prod_name")
dbGetQuery(con,
"SELECT prod_id, prod_price, prod_name
FROM Products
ORDER BY 2, 3")
dbGetQuery(con,
"SELECT prod_id, prod_price, prod_name
FROM Products
ORDER BY prod_price DESC, prod_name")
dbGetQuery(con,
"SELECT prod_name, prod_price
FROM Products
WHERE prod_price = 3.49")
dbGetQuery(con,
"SELECT prod_name, prod_price
FROM Products
WHERE prod_price < 10")
dbGetQuery(con,
"SELECT vend_id, prod_name
FROM Products
WHERE vend_id != 'DLL01'")
dbGetQuery(con,
"SELECT prod_name, prod_price
FROM Products
WHERE prod_price BETWEEN 5 AND 10")
dbGetQuery(con,
"SELECT cust_name
FROM Customers
WHERE cust_email IS NULL")
dbGetQuery(con,
"SELECT prod_id, prod_price, prod_name
FROM Products
WHERE vend_id = 'DLL01' AND prod_price <=4")
dbGetQuery(con,
"SELECT prod_name, prod_price
FROM Products
WHERE (vend_id = 'DLL01' OR vend_id = 'BRS01') AND prod_price >=10")
dbGetQuery(con,
"SELECT prod_name, prod_price
FROM Products
WHERE vend_id IN ('DLL01', 'BRS01')
ORDER BY prod_name")
dbGetQuery(con,
"SELECT prod_name
FROM Products
WHERE NOT vend_id = 'DLL01'
ORDER BY prod_name")
dbGetQuery(con,
"SELECT prod_id, prod_name
FROM Products
WHERE prod_name LIKE 'FISH%'")
dbGetQuery(con,
"SELECT prod_id, prod_name
FROM Products
WHERE prod_name LIKE '%bean bag%'")
dbGetQuery(con,
"SELECT prod_id, prod_name
FROM Products
WHERE prod_name LIKE 'F%y'")
dbGetQuery(con,
"SELECT prod_id, prod_name
FROM Products
WHERE prod_name LIKE '__ inch teddy bear'")
dbGetQuery(con_sqlite,
"SELECT vend_name || ' (' || vend_country || ')' AS vend_title
FROM Vendors
ORDER BY vend_name")
dbGetQuery(con,
"SELECT Concat(vend_name, ' (', vend_country, ')') AS vend_title
FROM Vendors
ORDER BY vend_name")
dbGetQuery(con,
"SELECT prod_id,
quantity,
item_price,
quantity*item_price AS expanded_price
FROM OrderItems
WHERE order_num = 20008")
# UPPER() 将文本转换为大写
dbGetQuery(con,
"SELECT vend_name,
UPPER(vend_name) AS vend_name_upcase
FROM Vendors
ORDER BY vend_name")
dbGetQuery(con,
"SELECT AVG(prod_price) AS avg_price
FROM Products")
dbGetQuery(con,
"SELECT AVG(prod_price) AS avg_price
FROM Products
WHERE vend_id = 'DLL01'")
dbGetQuery(con,
"SELECT COUNT(*) AS num_cust
FROM Customers")
dbGetQuery(con,
"SELECT COUNT(cust_email) AS num_cust
FROM Customers")
dbGetQuery(con,
"SELECT MAX(prod_price) AS max_price
FROM Products")
dbGetQuery(con,
"SELECT SUM(quantity) AS items_ordered
FROM OrderItems
WHERE order_num = 20005")
dbGetQuery(con,
"SELECT SUM(item_price*quantity)
FROM OrderItems
WHERE order_num = 20005")
# 此例计算各个不同的价格的平均数，不再有加权含义
dbGetQuery(con,
"SELECT AVG(DISTINCT prod_price) AS avg_price
FROM Products
WHERE vend_id = 'DLL01'")
dbGetQuery(con,
"SELECT COUNT(*) AS num_items,
MIN(prod_price) AS price_min,
MAX(prod_price) AS price_max,
AVG(prod_price) AS price_avg
FROM Products")
dbGetQuery(con,
"SELECT vend_id,
COUNT(*) AS num_prods
FROM Products
GROUP BY vend_id")
dbGetQuery(con,
"SELECT cust_id,
COUNT(*) AS orders
FROM Orders
GROUP BY cust_id
HAVING COUNT(*) >= 2")
dbGetQuery(con,
"SELECT vend_id,
COUNT(*) AS num_prods
FROM Products
WHERE prod_price >= 4
GROUP BY vend_id
HAVING COUNT(*) >= 2")
dbGetQuery(con,
"SELECT order_num,
COUNT(*) AS items
FROM OrderItems
GROUP BY order_num
HAVING COUNT(*) >= 3
ORDER BY items, order_num")
dbGetQuery(con,
"SELECT order_num
FROM OrderItems
WHERE prod_id = 'RGAN01'")
dbGetQuery(con,
"SELECT cust_id
FROM Orders
WHERE order_num IN (20007, 20008)")
dbGetQuery(con,
"SELECT cust_id
FROM Orders
WHERE order_num IN (SELECT order_num
FROM OrderItems
WHERE prod_id = 'RGAN01')")
dbGetQuery(con,
"SELECT cust_name, cust_contact
FROM Customers
WHERE cust_id IN ('1000000004', '1000000005')")
# 不够安全的写法，表结构变了就不能用了
dbGetQuery(con,
"INSERT INTO customers
VALUES( '1000000006',
'Toy Land',
'123 Any Street',
'New York',
'NY',
'11111',
'USA',
NULL,
NULL)")
dbDisconnect(con)
dbDisconnect(con_sqlite)
## global options
knitr::opts_chunk$set(
fig.width = 6, fig.asp = 0.618,
out.width = "80%", fig.align = "center",
fig.path = 'Figures/', fig.show = "hold",
warn = 1, warning = F, message = F, echo = T,
comment = '', collapse = F,
cache = T, cache.comments = F, autodep = T
)
## use necessary packages
library('pacman')
p_load(tidyverse, lubridate, # 数据整理，最新版tidyverse已包含管道操作符
ggthemes, showtext, gridExtra, # 可视化
lmtest, plm, orcutt, stats, forecast, zoo, # 统计分析
rvest, httr, xml2, # 爬虫
RMySQL, sqldf, DT, # I/O，其中sqldf包含了RSQLite包
jiebaR, wordcloud2, webshot, htmlwidgets # 文本分析
)
options(sqldf.driver = "SQLite")
## UNION 子句纵向合并数据框，类似rbind()
a5s <- sqldf("SELECT * FROM farms WHERE Mois = 'M1'", row.names = TRUE)
## UNION 子句纵向合并数据框，类似rbind()
a5s <- sqldf("SELECT * FROM farms WHERE Mois = 'M1'", row.names = TRUE)
unlink('SQL_Language_cache', recursive = TRUE)
unlink('SQL_Language_cache', recursive = TRUE)
