gather(key = attribute, value = value, gear, carb)
head(mtcarsNew)
unique(mtcarsNew$attribute)
View(mtcars)
View(mydata)
## 或用上一节的例子
md <- mydata %>% gather(varibale, value, X1, X2)
md
## 或用上一节的例子
md %>% spread(variable, value)
## 或用上一节的例子
md <- mydata %>% gather(varibale, value, X1, X2)
md
## 或用上一节的例子
md <- mydata %>% gather(variable, value, X1, X2)
md
## 或用上一节的例子
md %>% spread(variable, value)
# 除了car列外，其余列gather成两列，分别命名为attribute和value
mtcarsNew <- mtcars %>%
gather(key = attribute, value = value, -car)
View(mtcarsNew)
d.sep <- read_csv(
"testid, succ/total
1, 1/10
2, 3/5
3, 2/8
")
d.sep
d.sep %>%
separate(`succ/total`, into=c("succ", "total"),
sep="/", convert=TRUE)
?separate()
d.sep %>%
separate(succ/total, into=c("succ", "total"),
sep="/", convert=TRUE)
d.sep %>%
separate(`succ/total`, into=c("succ", "total"),
sep="/", convert=TRUE)
d.sep %>%
separate(`succ/total`, into = c("succ", "total"),
sep = "/", convert = TRUE)
?unite()
d.sep %>%
separate(`succ/total`, into=c("succ", "total"),
sep="/", convert=TRUE) %>%
unite(ratio, succ, total, sep=":")
## 另外一个例子
# 先虚构一数据框
set.seed(1)
date <- as.Date('2016-11-01') + 0:14
hour <- sample(1:24, 15)
min <- sample(1:60, 15)
second <- sample(1:60, 15)
event <- sample(letters, 15)
data <- data.table(date, hour, min, second, event)
library('data.table')
data <- data.table(date, hour, min, second, event)
View(data)
# 把date，hour，min和second列合并为新列datetime
# R中的日期时间格式为"Year-Month-Day Hour:Min:Second"
dataNew <- data %>% unite(datehour, date, hour, sep = ' ') %>% unite(datetime, datehour, min, second, sep = ':')
dataNew
library(tidyverse)
library(lubridate)
library(nycflights13)
library(hms)
today()
now()
ymd("2017-01-31")
mdy("January 31st, 2017")
dmy("31-Jan-2017")
ymd(20170131)
ymd_hms("2017-01-31 20:11:59")
mdy_hm("01/31/2017 08:01")
# 通过添加一个时区参数，可以将一个日期强制转换为日期时间：
ymd(20170131, tz = "UTC")
flights %>%
select(year, month, day, hour, minute) %>%
mutate(
departure = make_datetime(year, month, day, hour, minute)
)
## flights 数据集中的某些时间是将小时和分钟数简单地排列在一起的，需要将其分离
# 自定义分离函数
make_datetime_100 <- function(year, month, day, time) {
make_datetime(year, month, day, time %/% 100, time %% 100)
}
# 应用分离函数
flights_dt <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time)) %>%
mutate(
dep_time = make_datetime_100(year, month, day, dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)) %>%
select(origin, dest, ends_with("delay"), ends_with("time"))
flights_dt
# 以天为宽度汇总起飞航班的频数
flights_dt %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 86400)
# 86400秒 = 1天，由于横轴是日期时间型数据，1代表1秒
# 以10分钟为宽度，汇总2013年1月1日起飞航班的频数
flights_dt %>%
filter(dep_time < ymd(20130102)) %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 600) # 600秒 = 10分钟
as_datetime(today())
as_date(now())
as_date(365 * 10 + 2) # 基准时间之后10年，考虑到两个闰年加两天
as_datetime(60 * 60 * 10) # 基准时间滞后10个小时
datetime <- ymd_hms("2016-07-08 12:34:56")
year(datetime)
month(datetime)
mday(datetime)
yday(datetime)
wday(datetime)
month(datetime, label = TRUE)
wday(datetime, label = TRUE, abbr = FALSE)
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) + geom_bar()
# 查看一小时内每分钟的平均出发延误
flights_dt %>%
mutate(minute = minute(dep_time)) %>%
group_by(minute) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()) %>%
ggplot(aes(minute, avg_delay)) +
geom_line()
# 我们发现，似乎在第20~30分钟和第50~60分钟内出发的航班的延误时间远远低于其他时间出发的航班
flights_dt %>%
count(week = floor_date(dep_time, "week")) %>%
ggplot(aes(week, n)) + geom_line()
(datetime <- ymd_hms("2016-07-08 12:34:56"))
year(datetime) <- 2020
datetime
month(datetime) <- 01
datetime
hour(datetime) <- hour(datetime) + 1
update(datetime, year = 2020, month = 2, mday = 2, hour = 2)
ymd("2015-02-01") %>% update(mday = 30) # 2月没有30号，所以从1号开始往后推30天
ymd("2015-02-01") %>% update(hour = 400)
flights_dt %>%
mutate(dep_hour = update(dep_time, yday = 1)) %>%
ggplot(aes(dep_hour)) +
geom_freqpoly(binwidth = 300)
# Hadley多大了？
h_age <- today() - ymd(19791014)
h_age
as.duration(h_age)
dseconds(15)
dminutes(10)
dhours(c(12, 24))
ddays(0:5)
dweeks(3)
dyears(1)
dyears(1) + dweeks(12) + dhours(15)
tomorrow <- today() + ddays(1)
last_year <- today() - dyears(1)
seconds(15)
minutes(10)
hours(c(12, 24))
days(7)
months(1:6)
weeks(3)
years(1)
10 * (months(6) + days(1))
days(50) + hours(25) + minutes(2)
## 闰年问题
ymd("2016-01-01") + dyears(1) # dyears()产生的时期只是简单地加了365天
ymd("2016-01-01") + years(1) # 考虑到2016年为闰年，years()产生的阶段加了366天
next_year <- today() + years(1)
next_year
(today() %--% next_year) / ddays(1)
Sys.timezone()
head(OlsonNames())
(x1 <- ymd_hms("2015-06-01 12:00:00",
tz = "America/New_York"))
(x2 <- ymd_hms("2015-06-01 18:00:00",
tz = "Europe/Copenhagen"))
(x3 <- ymd_hms("2015-06-02 04:00:00",
tz = "Pacific/Auckland"))
x4 <- c(x1, x2, x3)
x4
x4a <- with_tz(x4, tzone = "Asia/Taipei")
x4a
x4b <- force_tz(x4, tzone = "Asia/Taipei")
x4b
knitr::opts_chunk$set(fig.width = 6, fig.height = 4.5,
fig.path = 'Figs/', warning = FALSE,
message = FALSE, cache = T,
cache.comments = T, comment = '#>')
library(tidyverse)
library(lubridate)
library(nycflights13)
library(hms)
today()
now()
ymd("2017-01-31")
mdy("January 31st, 2017")
dmy("31-Jan-2017")
ymd(20170131)
ymd_hms("2017-01-31 20:11:59")
mdy_hm("01/31/2017 08:01")
# 通过添加一个时区参数，可以将一个日期强制转换为日期时间：
ymd(20170131, tz = "UTC")
flights %>%
select(year, month, day, hour, minute) %>%
mutate(
departure = make_datetime(year, month, day, hour, minute)
)
## flights 数据集中的某些时间是将小时和分钟数简单地排列在一起的，需要将其分离
# 自定义分离函数
make_datetime_100 <- function(year, month, day, time) {
make_datetime(year, month, day, time %/% 100, time %% 100)
}
# 应用分离函数
flights_dt <- flights %>%
filter(!is.na(dep_time), !is.na(arr_time)) %>%
mutate(
dep_time = make_datetime_100(year, month, day, dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)) %>%
select(origin, dest, ends_with("delay"), ends_with("time"))
flights_dt
# 以天为宽度汇总起飞航班的频数
flights_dt %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 86400)
# 86400秒 = 1天，由于横轴是日期时间型数据，1代表1秒
# 以10分钟为宽度，汇总2013年1月1日起飞航班的频数
flights_dt %>%
filter(dep_time < ymd(20130102)) %>%
ggplot(aes(dep_time)) +
geom_freqpoly(binwidth = 600) # 600秒 = 10分钟
as_datetime(today())
as_date(now())
as_date(365 * 10 + 2) # 基准时间之后10年，考虑到两个闰年加两天
as_datetime(60 * 60 * 10) # 基准时间滞后10个小时
datetime <- ymd_hms("2016-07-08 12:34:56")
year(datetime)
month(datetime)
mday(datetime)
yday(datetime)
wday(datetime)
month(datetime, label = TRUE)
wday(datetime, label = TRUE, abbr = FALSE)
flights_dt %>%
mutate(wday = wday(dep_time, label = TRUE)) %>%
ggplot(aes(x = wday)) + geom_bar()
# 查看一小时内每分钟的平均出发延误
flights_dt %>%
mutate(minute = minute(dep_time)) %>%
group_by(minute) %>%
summarize(avg_delay = mean(arr_delay, na.rm = TRUE),
n = n()) %>%
ggplot(aes(minute, avg_delay)) +
geom_line()
# 我们发现，似乎在第20~30分钟和第50~60分钟内出发的航班的延误时间远远低于其他时间出发的航班
flights_dt %>%
count(week = floor_date(dep_time, "week")) %>%
ggplot(aes(week, n)) + geom_line()
(datetime <- ymd_hms("2016-07-08 12:34:56"))
year(datetime) <- 2020
datetime
month(datetime) <- 01
datetime
hour(datetime) <- hour(datetime) + 1
update(datetime, year = 2020, month = 2, mday = 2, hour = 2)
ymd("2015-02-01") %>% update(mday = 30) # 2月没有30号，所以从1号开始往后推30天
ymd("2015-02-01") %>% update(hour = 400)
flights_dt %>%
mutate(dep_hour = update(dep_time, yday = 1)) %>%
ggplot(aes(dep_hour)) +
geom_freqpoly(binwidth = 300)
# Hadley多大了？
h_age <- today() - ymd(19791014)
h_age
as.duration(h_age)
dseconds(15)
dminutes(10)
dhours(c(12, 24))
ddays(0:5)
dweeks(3)
dyears(1)
dyears(1) + dweeks(12) + dhours(15)
tomorrow <- today() + ddays(1)
last_year <- today() - dyears(1)
seconds(15)
minutes(10)
hours(c(12, 24))
days(7)
months(1:6)
weeks(3)
years(1)
10 * (months(6) + days(1))
days(50) + hours(25) + minutes(2)
## 闰年问题
ymd("2016-01-01") + dyears(1) # dyears()产生的时期只是简单地加了365天
ymd("2016-01-01") + years(1) # 考虑到2016年为闰年，years()产生的阶段加了366天
next_year <- today() + years(1)
next_year
(today() %--% next_year) / ddays(1)
Sys.timezone()
head(OlsonNames())
(x1 <- ymd_hms("2015-06-01 12:00:00",
tz = "America/New_York"))
(x2 <- ymd_hms("2015-06-01 18:00:00",
tz = "Europe/Copenhagen"))
(x3 <- ymd_hms("2015-06-02 04:00:00",
tz = "Pacific/Auckland"))
x4 <- c(x1, x2, x3)
x4
x4a <- with_tz(x4, tzone = "Asia/Taipei")
x4a
x4b <- force_tz(x4, tzone = "Asia/Taipei")
x4b
unlink('C:/Users/humoo/OneDrive/ICT/Humoon_Website/static/notes/R课程笔记/08_关系数据和特殊数据类型/Dealing_With_Date_and_Time_cache', recursive = TRUE)
unlink('Basic_Data_Management_cache', recursive = TRUE)
library('tidyverse')
library('xlsx')
library('reshape2')
library('nycflights13')
library('data.table')
5 %>% str_c('f')
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
?melt
?melt()
## global options
knitr::opts_chunk$set(
fig.width = 6, fig.asp = 0.618,
out.width = "80%", fig.align = "center",
fig.path = 'Figures/', fig.show = "hold",
warn = 1, warning = FALSE, message = FALSE, echo = TRUE,
comment = '', collapse = F,
cache = T, cache.comments = F, autodep = TRUE
)
## use necessary packages
library('pacman')
p_load(tidyverse, lubridate, data.table, # 数据整理，最新版tidyverse已包含管道操作符
ggthemes, showtext, gridExtra, # 可视化
lmtest, plm, orcutt, stats, forecast, zoo, # 统计分析
rvest, httr, xml2, # 爬虫
sqldf, DT, # I/O，其中sqldf包含了RSQLite包
jiebaR, wordcloud2, webshot, htmlwidgets, tidytext # 文本分析
)
options(sqldf.driver = "SQLite")
## pdf中图形内部的中文字体设置
pdf.options(family = "GB1")
# 安装字体文件
# font_add('YaHei','MS YaHei.ttf')
windowsFonts(YaHei = windowsFont("Microsoft YaHei"))
showtext_auto(enable = TRUE)
# 包含图的代码块需要fig.showtext = TRUE选项
# ggplot2图形需要在主题中显式指定中文字体才能正常显示图中的中文
## 自定义一般图形主题
mytheme <- theme_economist_white() +
theme(text = element_text(family = 'YaHei'),
plot.title = element_text(face = 'bold', size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(hjust = 0, size = 10, margin = margin(2,0,0,0,'pt')),
plot.margin = margin(12,10,12,0,'pt'),
legend.position = 'top',
legend.justification = 'left',
legend.margin = margin(4,0,0,0,'pt'),
legend.key.size = unit(1,'lines'),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10, margin = margin(0,0,0,0,'pt')),
axis.text = element_text(size = 10, margin = margin(2,0,2,0,'pt')),
axis.ticks.length = unit(-4,'pt')
)
# 自定义柱状图主题
theme_bar <- theme_economist_white() +
theme(text = element_text(family = 'YaHei'), # 所有的文本字体
plot.title = element_text(face = 'bold', size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(hjust = 0, size = 10,
margin = margin(0,0,0,0,'pt')),
plot.margin = margin(12,0,12,10,'pt'),
legend.position = 'top',
legend.justification = 'left',
legend.margin = margin(4,0,0,0,'pt'),
legend.key.size = unit(0.7,'lines'),
legend.title = element_blank(),
legend.text = element_text(size = 10, margin = margin(0,8,0,4,'pt')),
axis.text = element_text(size = 10),
axis.ticks.length = unit(0,'pt') # 不要坐标轴须
)
# input data
mydata <- read.table(header = TRUE, sep = " ", text = "
ID Time X1 X2
1 1 5 6
1 2 3 5
2 1 6 1
2 2 2 4
")
mydata
# id参数中的变量维持属性地位，其他变量的值都成为value，因此其他变量被合并成一列variable
md <- melt(mydata, id = c("ID", "Time")) #or md <- melt(mydata, id=1:2)
md
?melt
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
# load necessary packages
library('tidyverse')
library('xlsx')
install.packages("xlsx")
# load necessary packages
library('tidyverse')
library('xlsx')
install.packages("xlsx")
library('xlsx')
install.packages("rJava")
library('xlsx')
# load necessary packages
library('tidyverse')
# library('xlsx')
library('reshape2')
library('nycflights13')
library('data.table')
library('magrittr')
# define necessary functions
# 若需在行内插入数值，自定义保留小数位数、增加千位分隔符的函数comma
comma <- function(x) format(x, digits = 2, big.mark = ",")
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
## global options
knitr::opts_chunk$set(
fig.width = 6, fig.asp = 0.618,
out.width = "80%", fig.align = "center",
fig.path = 'Figures/', fig.show = "hold",
warn = 1, warning = FALSE, message = FALSE, echo = TRUE,
comment = '', collapse = F,
cache = T, cache.comments = F, autodep = TRUE
)
## use necessary packages
library('pacman')
p_load(tidyverse, lubridate, data.table, # 数据整理，最新版tidyverse已包含管道操作符
ggthemes, showtext, gridExtra, # 可视化
lmtest, plm, orcutt, stats, forecast, zoo, # 统计分析
rvest, httr, xml2, # 爬虫
sqldf, DT, # I/O，其中sqldf包含了RSQLite包
jiebaR, wordcloud2, webshot, htmlwidgets, tidytext # 文本分析
)
options(sqldf.driver = "SQLite")
## pdf中图形内部的中文字体设置
pdf.options(family = "GB1")
# 安装字体文件
# font_add('YaHei','MS YaHei.ttf')
windowsFonts(YaHei = windowsFont("Microsoft YaHei"))
showtext_auto(enable = TRUE)
# 包含图的代码块需要fig.showtext = TRUE选项
# ggplot2图形需要在主题中显式指定中文字体才能正常显示图中的中文
## 自定义一般图形主题
mytheme <- theme_economist_white() +
theme(text = element_text(family = 'YaHei'),
plot.title = element_text(face = 'bold', size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(hjust = 0, size = 10, margin = margin(2,0,0,0,'pt')),
plot.margin = margin(12,10,12,0,'pt'),
legend.position = 'top',
legend.justification = 'left',
legend.margin = margin(4,0,0,0,'pt'),
legend.key.size = unit(1,'lines'),
legend.title = element_text(size = 12),
legend.text = element_text(size = 10, margin = margin(0,0,0,0,'pt')),
axis.text = element_text(size = 10, margin = margin(2,0,2,0,'pt')),
axis.ticks.length = unit(-4,'pt')
)
# 自定义柱状图主题
theme_bar <- theme_economist_white() +
theme(text = element_text(family = 'YaHei'), # 所有的文本字体
plot.title = element_text(face = 'bold', size = 14),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(hjust = 0, size = 10,
margin = margin(0,0,0,0,'pt')),
plot.margin = margin(12,0,12,10,'pt'),
legend.position = 'top',
legend.justification = 'left',
legend.margin = margin(4,0,0,0,'pt'),
legend.key.size = unit(0.7,'lines'),
legend.title = element_blank(),
legend.text = element_text(size = 10, margin = margin(0,8,0,4,'pt')),
axis.text = element_text(size = 10),
axis.ticks.length = unit(0,'pt') # 不要坐标轴须
)
NHANES %>%
drop_na(AlcoholDay) %>%
nrow()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
